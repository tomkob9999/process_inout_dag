
showWeight = True

mydag = ProcessInOutDAG()


intext = """
starter	4		
requests_apple	1	starter	
questioned_apple	3	requests_apple	
answered_apple	2	questioned_apple	
detailed_apple	3	answered_apple	
estimated_apple	2	detailed_apple	
prioritized_apple	4	estimated_apple	
reviewed_apple	2	prioritized_apple	
refined_apple	3	reviewed_apple	
requests_orange	1	starter	
questioned_orange	5	requests_orange	
answered_orange	3	questioned_orange	
detailed_orange	6	answered_orange	
estimated_orange	4	detailed_orange	
prioritized_orange	6	estimated_orange	
reviewed_orange	3	prioritized_orange	
refined_orange	5	reviewed_orange	
scoped	8	refined_apple	refined_orange
approved	2	scoped
"""


mydag.data_import(intext=intext, is_oup_list=True)

# mydag.read_cond_list_from_file("/kaggle/input/cond-list5/cond_list5.txt") # and
# # mydag.read_cond_list_from_file("/kaggle/input/cond-list6/cond_list6.txt") # or
# # mydag.read_cond_list_from_file("/kaggle/input/cond-list7/cond_list7.txt") # or
# mydag.read_cond_list_from_file("/kaggle/input/cond-list9/cond_list9.txt") # or
# mydag.read_cond_list_from_file("/kaggle/input/cond-list10/cond_list10.txt") # or

intext = """
scoped	(refined_apple | refined_orange)
"""

mydag.read_cond_list_from_file(intext=intext)

# intext = """
# refined_orange	scoped	.05
# """

# # mydag.read_opt_list_from_file("/kaggle/input/cond-list9/opt_list9.txt") # apple-5%
# # mydag.read_opt_list_from_file("/kaggle/input/cond-list10/opt_list10.txt") # orange-5%
# mydag.read_opt_list_from_file(intext=intext)


mydag.dic_capacity["starter"] = 60
mydag.dic_capacity["requests_apple"] = 70
mydag.dic_capacity["questioned_apple"] = 40
mydag.dic_capacity["answered_apple"] = 50
mydag.dic_capacity["detailed_apple"] = 40
mydag.dic_capacity["estimated_apple"] = 50
mydag.dic_capacity["prioritized_apple"] = 30
mydag.dic_capacity["reviewed_apple"] = 40
mydag.dic_capacity["refined_apple"] = 70
mydag.dic_capacity["requests_orange"] = 90
mydag.dic_capacity["questioned_orange"] = 50
mydag.dic_capacity["answered_orange"] = 60
mydag.dic_capacity["detailed_orange"] = 40
mydag.dic_capacity["estimated_orange"] = 50
mydag.dic_capacity["prioritized_orange"] = 30
mydag.dic_capacity["reviewed_orange"] = 40
mydag.dic_capacity["refined_orange"] = 60
mydag.dic_capacity["scoped"] = 20


# intext = """
# starter	requests_apple	0.9	
# starter	requests_orange	0.1	
# """

# mydag.read_bran_list_from_file(intext=intext)

def func3(task):
    task.storage["val"] = "GOD"
    print("task.storage[input]", task.storage["input"])
    print("task.flow_seq", task.flow_seq)
    print("task.reference[one]", task.reference["one"])
    print("storage", task.storage)
    return "func3 finished"
        
myhooks = {"questioned_orange": func3,
          "detailed_orange": lambda task: print(task.storage["val"]),
          "scoped": func3
          }

    
myhooks_cond = {
          "answered_orange": lambda task: task.storage["val"] == "GOD"
          }

myhooks_bran = {
          "starter": lambda task: ["requests_orange"]
          }

mydag.reference["one"] = "something"
# res = mydag.simulate_flow(["approved"], figsize=(12,5), silent=True, sim_repeats=3000, fromSink=True)
res = mydag.simulate_flow(["approved"], figsize=(12,5), silent=False, sim_repeats=1, fromSink=True, inp_data="Hello Kitty", hooks=myhooks, cond_hooks=myhooks_cond, bran_hooks=myhooks_bran)
# res = mydag.simulate_flow(["approved"], figsize=(12,5), silent=False, sim_repeats=1, fromSink=True)
# res = mydag.simulate_flow(["approved"], figsize=(12,5), silent=False, sim_repeats=1, fromSink=True, hooks=myhooks, cond_hooks=myhooks_cond, bran_hooks=myhooks_bran)
# res = mydag.simulate_flow(["approved"], figsize=(12,5), silent=True, sim_repeats=1, fromSink=True, task_occurrences=300, task_interval=100)

# res = mydag.execute_flow(33, ["approved"], fromSink=True, silent=True, inp_data="Hello Kitty", hooks=myhooks, cond_hooks=myhooks_cond, bran_hooks=myhooks_bran)
print("res", res)

mydag.drawOrigins("approved", figsize=(12,5))

mydag.drawOriginsStretch("approved", figsize=(12,5), showWeight=showWeight, showExpectationBased=True)
# # mydag.drawOriginsStretch("COL46", showWeight=showWeight, showExpectationBased=True, use_lognormal=False)
# # mydag.drawOriginsStretch("COL51", showWeight=showWeight, showExpectationBased=True)